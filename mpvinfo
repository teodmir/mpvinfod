#!/usr/bin/env python3

import socket
import json
import signal
import sys
import time
import fcntl
import errno

RECV_CHUNK = 8192
CLIENT_ID = 1
ADDR = '/tmp/mpvsocket'
LOCK = '/tmp/mpvinfod.lock'
RETRY_DELAY = 10

property_dict = {
    'media-title': None,
    'metadata/by-key/album': None,
    'volume': None,
    'loop-file': None
}


def run_once(command):
    with open(LOCK, "w") as f:
        try:
            fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
            command()
        except IOError as e:
            if e.errno in (errno.EWOULDBLOCK, errno.EAGAIN):
                print('Another instance of mpvinfod is already running',
                      file=sys.stderr)
            else:
                waybar_empty()
            sys.exit(1)
        except Exception:
            waybar_empty()


def signal_handler(sig, frame):
    waybar_empty()
    sys.exit(0)


def wait_connect():
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    connected = False
    while not connected:
        try:
            sock.connect(ADDR)
            connected = True
        except Exception:
            waybar_empty()
            sys.exit(0)
    return sock


def observe(sock, prop):
    str = json.dumps({
        'command': ['observe_property_string', CLIENT_ID, prop]
    }) + '\n'
    sock.sendall(str.encode('UTF-8'))


def query(sock, prop):
    str = json.dumps({'command': ['get_property_string', prop]}) + '\n'
    sock.sendall(str.encode('UTF-8'))


def get_jsons(str):
    return list(map(json.loads, str.splitlines()))


def waybar_output(title):
    print(json.dumps({'text': title, 'alt': 'mpv', 'class': 'custom-mpv'}),
          flush=True)


def waybar_empty():
    waybar_output('n/a')


def get_newest_event(json_list, event):
    events = [
        j for j in json_list
        if list(map(j.get, ['event', 'id', 'name'])) ==
        ['property-change', CLIENT_ID, event]
    ]
    if not events:
        return None
    else:
        return events[-1].get('data')


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)

    print('Waiting for mpv connection...')
    while True:
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        try:
            sock.connect(ADDR)
            break
        except ConnectionError:
            time.sleep(5)

    observe(sock, 'media-title')
    observe(sock, 'metadata/by-key/album')

    title = None
    album = None
    while True:
        contents = sock.recv(RECV_CHUNK)
        if not contents:  # Connection closed
            waybar_empty()
            sys.exit(0)
        json_list = get_jsons(contents.decode('UTF-8'))
        newest_title = get_newest_event(json_list, 'media-title')
        newest_album = get_newest_event(json_list, 'metadata/by-key/album')
        if (newest_title or title) and (newest_title or newest_album):
            title = newest_title or title
            album = newest_album or album
            waybar_output(title +
                          (" | " + album if album else ""))
